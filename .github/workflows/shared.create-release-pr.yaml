name: Create Release PR

on:
  workflow_call:
    inputs:
      branch:
        description: "Branch (full ref) to use for this PR"
        required: true
        type: string

jobs:
  debug_info:
    name: Debug info
    runs-on: ubuntu-22.04
    steps:
      - name: Print github context JSON
        run: |
          cat <<EOF
          ${{ toJson(github) }}
          EOF

  gather_facts:
    name: Gather facts
    runs-on: ubuntu-22.04
    outputs:
      repo_name:        ${{ steps.gather_facts.outputs.repo_name }}
      branch:           ${{ steps.gather_facts.outputs.branch }}
      base:             ${{ steps.gather_facts.outputs.base }}
      needs_major_bump: ${{ steps.gather_facts.outputs.needs_major_bump }}
      skip:             ${{ steps.pr_exists.outputs.skip }}
      version:          ${{ steps.gather_facts.outputs.version }}
    steps:
      - name: Gather facts
        id: gather_facts
        run: |
          head="${{ inputs.branch }}"
          echo "branch=${head}" >> $GITHUB_OUTPUT

          head="${head#refs/heads/}"
          if [[ $(echo "$head" | grep -o '#' | wc -l) -gt 1 ]]; then
            base="$(echo $head | cut -d '#' -f 1)"
          else
            base="${{ github.event.base_ref }}"
          fi
          base="${base#refs/heads/}"

          version="$(echo $head | awk -F# '{print $NF}')"
          if [[ $version =~ ^(major|minor|patch)$ ]]; then
            gh auth login --with-token <<<"${{ secrets.TAYLORBOT_GITHUB_ACTION }}"
            gh_api_get_latest_release_version() {
              if ! version="$(gh api "repos/${{ github.repository }}/releases/latest" --jq '.tag_name[1:]')" ; then
                echo "0 0 0"
              fi
              echo "$version"
            }
            read version_major version_minor version_patch <<<"$(gh_api_get_latest_release_version)"
            case $version in
              patch) version_patch=$((version_patch+1)) ;;
              minor) version_minor=$((version_minor+1)); version_patch=0 ;;
              major)
                version_major=$((version_major+1))
                version_minor=0; version_patch=0
                if [[ "$version_major" -ne 1 ]]; then
                  echo "needs_major_bump=true" >> $GITHUB_OUTPUT
                fi
                ;;
            esac
            version="${version_major}.${version_minor}.${version_patch}"
          else
            version="${version#v}"
            version_major="${version%%.*}"
            remainder="${version#*.}"
            version_minor="${remainder%%.*}"
            version_patch="${remainder#*.}"
            if [[ $version_minor -eq 0 && $version_patch =~ ^0 && $version_major -ne 1 ]]; then
              echo "needs_major_bump=true" >> $GITHUB_OUTPUT
            fi
          fi

          repo_name="${{ github.repository }}" 
          repo_name="${repo_name#*/}"
          echo "repo_name=${repo_name}" >> $GITHUB_OUTPUT
          echo "base=${base}"           >> $GITHUB_OUTPUT
          echo "head=${head}"           >> $GITHUB_OUTPUT
          echo "version=${version}"     >> $GITHUB_OUTPUT

      - name: Check if PR exists
        id: pr_exists
        env:
          GITHUB_TOKEN: "${{ secrets.TAYLORBOT_GITHUB_ACTION }}"
        run: |
          branch="${{ steps.gather_facts.outputs.branch#refs/heads/ }}"
          if gh pr view --repo "${{ github.repository }}" "$branch" --json state --jq .state | grep -qi open; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

  prepare_release_pr:
    name: Prepare release PR for Backstage project
    runs-on: ubuntu-22.04
    needs: gather_facts
    if: ${{ needs.gather_facts.outputs.skip != 'true' && github.repository == 'giantswarm/backstage' }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          ref: ${{ needs.gather_facts.outputs.branch }}
      - uses: actions/setup-node@v4.4.0
        with:
          node-version: '20'
      - uses: borales/actions-yarn@v5.0.0
        with:
          cmd: install
      - name: Prepare release PR
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: release
        env:
          RELEASE_VERSION: ${{ needs.gather_facts.outputs.version }}
      - name: Set up git identity
        run: |
          git config --local user.email "dev@giantswarm.io"
          git config --local user.name  "taylorbot"
      - name: Create commit
        env:
          version: "${{ needs.gather_facts.outputs.version }}"
        run: |
          git add -A
          git commit -m "Prepare release v${{ env.version }}"
      - name
